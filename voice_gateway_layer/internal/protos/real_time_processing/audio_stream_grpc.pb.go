// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: audio_stream.proto

package real_time_processing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamIngest_IngestAudioSegment_FullMethodName = "/real_time_processing.StreamIngest/IngestAudioSegment"
)

// StreamIngestClient is the client API for StreamIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamIngestClient interface {
	IngestAudioSegment(ctx context.Context, in *AudioSegment, opts ...grpc.CallOption) (*IngestResponse, error)
}

type streamIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamIngestClient(cc grpc.ClientConnInterface) StreamIngestClient {
	return &streamIngestClient{cc}
}

func (c *streamIngestClient) IngestAudioSegment(ctx context.Context, in *AudioSegment, opts ...grpc.CallOption) (*IngestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestResponse)
	err := c.cc.Invoke(ctx, StreamIngest_IngestAudioSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamIngestServer is the server API for StreamIngest service.
// All implementations must embed UnimplementedStreamIngestServer
// for forward compatibility.
type StreamIngestServer interface {
	IngestAudioSegment(context.Context, *AudioSegment) (*IngestResponse, error)
	mustEmbedUnimplementedStreamIngestServer()
}

// UnimplementedStreamIngestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamIngestServer struct{}

func (UnimplementedStreamIngestServer) IngestAudioSegment(context.Context, *AudioSegment) (*IngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestAudioSegment not implemented")
}
func (UnimplementedStreamIngestServer) mustEmbedUnimplementedStreamIngestServer() {}
func (UnimplementedStreamIngestServer) testEmbeddedByValue()                      {}

// UnsafeStreamIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamIngestServer will
// result in compilation errors.
type UnsafeStreamIngestServer interface {
	mustEmbedUnimplementedStreamIngestServer()
}

func RegisterStreamIngestServer(s grpc.ServiceRegistrar, srv StreamIngestServer) {
	// If the following call pancis, it indicates UnimplementedStreamIngestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamIngest_ServiceDesc, srv)
}

func _StreamIngest_IngestAudioSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamIngestServer).IngestAudioSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamIngest_IngestAudioSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamIngestServer).IngestAudioSegment(ctx, req.(*AudioSegment))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamIngest_ServiceDesc is the grpc.ServiceDesc for StreamIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "real_time_processing.StreamIngest",
	HandlerType: (*StreamIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestAudioSegment",
			Handler:    _StreamIngest_IngestAudioSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio_stream.proto",
}

const (
	SpeechToText_TranscribeAudioSegment_FullMethodName = "/real_time_processing.SpeechToText/TranscribeAudioSegment"
)

// SpeechToTextClient is the client API for SpeechToText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextClient interface {
	// Sends a segment for transcription, could be part of a stream
	TranscribeAudioSegment(ctx context.Context, in *AudioSegment, opts ...grpc.CallOption) (*TranscriptionResponse, error)
}

type speechToTextClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextClient(cc grpc.ClientConnInterface) SpeechToTextClient {
	return &speechToTextClient{cc}
}

func (c *speechToTextClient) TranscribeAudioSegment(ctx context.Context, in *AudioSegment, opts ...grpc.CallOption) (*TranscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptionResponse)
	err := c.cc.Invoke(ctx, SpeechToText_TranscribeAudioSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechToTextServer is the server API for SpeechToText service.
// All implementations must embed UnimplementedSpeechToTextServer
// for forward compatibility.
type SpeechToTextServer interface {
	// Sends a segment for transcription, could be part of a stream
	TranscribeAudioSegment(context.Context, *AudioSegment) (*TranscriptionResponse, error)
	mustEmbedUnimplementedSpeechToTextServer()
}

// UnimplementedSpeechToTextServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeechToTextServer struct{}

func (UnimplementedSpeechToTextServer) TranscribeAudioSegment(context.Context, *AudioSegment) (*TranscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeAudioSegment not implemented")
}
func (UnimplementedSpeechToTextServer) mustEmbedUnimplementedSpeechToTextServer() {}
func (UnimplementedSpeechToTextServer) testEmbeddedByValue()                      {}

// UnsafeSpeechToTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServer will
// result in compilation errors.
type UnsafeSpeechToTextServer interface {
	mustEmbedUnimplementedSpeechToTextServer()
}

func RegisterSpeechToTextServer(s grpc.ServiceRegistrar, srv SpeechToTextServer) {
	// If the following call pancis, it indicates UnimplementedSpeechToTextServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpeechToText_ServiceDesc, srv)
}

func _SpeechToText_TranscribeAudioSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechToTextServer).TranscribeAudioSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechToText_TranscribeAudioSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechToTextServer).TranscribeAudioSegment(ctx, req.(*AudioSegment))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeechToText_ServiceDesc is the grpc.ServiceDesc for SpeechToText service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechToText_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "real_time_processing.SpeechToText",
	HandlerType: (*SpeechToTextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranscribeAudioSegment",
			Handler:    _SpeechToText_TranscribeAudioSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio_stream.proto",
}

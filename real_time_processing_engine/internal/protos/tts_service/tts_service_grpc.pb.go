// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tts_service.proto

package tts_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextToSpeechService_SynthesizeText_FullMethodName = "/real_time_processing_engine.tts.TextToSpeechService/SynthesizeText"
)

// TextToSpeechServiceClient is the client API for TextToSpeechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToSpeechServiceClient interface {
	// Synthesizes text to speech
	SynthesizeText(ctx context.Context, in *TTSRequest, opts ...grpc.CallOption) (*TTSResponse, error)
}

type textToSpeechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToSpeechServiceClient(cc grpc.ClientConnInterface) TextToSpeechServiceClient {
	return &textToSpeechServiceClient{cc}
}

func (c *textToSpeechServiceClient) SynthesizeText(ctx context.Context, in *TTSRequest, opts ...grpc.CallOption) (*TTSResponse, error) {
	out := new(TTSResponse)
	err := c.cc.Invoke(ctx, TextToSpeechService_SynthesizeText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextToSpeechServiceServer is the server API for TextToSpeechService service.
// All implementations must embed UnimplementedTextToSpeechServiceServer
// for forward compatibility
type TextToSpeechServiceServer interface {
	// Synthesizes text to speech
	SynthesizeText(context.Context, *TTSRequest) (*TTSResponse, error)
	mustEmbedUnimplementedTextToSpeechServiceServer()
}

// UnimplementedTextToSpeechServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextToSpeechServiceServer struct {
}

func (UnimplementedTextToSpeechServiceServer) SynthesizeText(context.Context, *TTSRequest) (*TTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynthesizeText not implemented")
}
func (UnimplementedTextToSpeechServiceServer) mustEmbedUnimplementedTextToSpeechServiceServer() {}

// UnsafeTextToSpeechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToSpeechServiceServer will
// result in compilation errors.
type UnsafeTextToSpeechServiceServer interface {
	mustEmbedUnimplementedTextToSpeechServiceServer()
}

func RegisterTextToSpeechServiceServer(s grpc.ServiceRegistrar, srv TextToSpeechServiceServer) {
	s.RegisterService(&TextToSpeechService_ServiceDesc, srv)
}

func _TextToSpeechService_SynthesizeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToSpeechServiceServer).SynthesizeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextToSpeechService_SynthesizeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToSpeechServiceServer).SynthesizeText(ctx, req.(*TTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextToSpeechService_ServiceDesc is the grpc.ServiceDesc for TextToSpeechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextToSpeechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "real_time_processing_engine.tts.TextToSpeechService",
	HandlerType: (*TextToSpeechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SynthesizeText",
			Handler:    _TextToSpeechService_SynthesizeText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tts_service.proto",
}
